<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" TreatAsLocalProperty="TaskFolder;TaskAssembly">

  <Import Project="$(ProjectDir)TsGenerator.props" Condition="Exists('$(ProjectDir)TsGenerator.props')" />

  <PropertyGroup>
    <TaskFolder Condition=" '$(MSBuildRuntimeType)' == 'Core' ">netcoreapp2.0</TaskFolder>
    <TaskFolder Condition=" '$(MSBuildRuntimeType)' != 'Core' ">net46</TaskFolder>
    <TaskFolder Condition=" '$(TargetFramework)' == 'net6.0' ">net6.0</TaskFolder>
    <TaskAssembly>$(MSBuildThisFileDirectory)..\$(TaskFolder)\TypeScriptDefinitionsGenerator.BuildSupport.dll</TaskAssembly>
  </PropertyGroup>


  <UsingTask
          TaskName="CreateMulitpleParameterString"
          TaskFactory="RoslynCodeTaskFactory"
          AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Values ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <ArgumentName Required="true" />
      <Parameter Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.Collections.Generic" />

      <Code Type="Fragment" Language="cs">
        <![CDATA[
            Parameter = "";

            if (Values == null || Values.Length == 0) return true;

            Parameter = ArgumentName + " ";
            var valuesToJoin = new List<string>();
            foreach (var value in Values)
            {
                if (string.IsNullOrWhiteSpace(value.ItemSpec)) continue;
                valuesToJoin.Add(value.ItemSpec);
            }
            Parameter += string.Join(",", valuesToJoin);
]]>
      </Code>
    </Task>
  </UsingTask>

  <Target Name="AfterResolveReferences">

    <Error Condition="!Exists('$(ProjectDir)TsGenerator.props')" Text="You must add a TsGenerator.props file to the root of your project.  Please see https://github.com/slovely/TypeScriptDefinitionsGenerator/blob/master/src/TypeScriptDefinitionsGenerator/build/TsGenerator.props for an example." />

    <CreateMulitpleParameterString Values="@(TsNamespaces)" ArgumentName="-n">
      <Output TaskParameter="Parameter" PropertyName="NamespacesParam"></Output>
    </CreateMulitpleParameterString>

    <CreateMulitpleParameterString Values="@(TsGenInputAssembly)" ArgumentName="-a">
      <Output TaskParameter="Parameter" PropertyName="InputAssembliesParam"></Output>
    </CreateMulitpleParameterString>

    <PropertyGroup>
      <DebugParam Condition="'$(TsGenDebug)' == 'true'">--debugger</DebugParam>
      <WebApiParam Condition="'$(TsGenWebApiMethods)' == 'true'">--webapiactions</WebApiParam>
      <!-- Default/Aurelia - indicates whether default (JQuery) or Aurelia action methods should be generated -->
      <TsGenApiMethodStyle Condition="'$(TsGenApiMethodStyle)' == ''">Default</TsGenApiMethodStyle>
      <TsGenAsModules Condition="'$(TsGenAsModules)' == 'true'">--generateasmodules</TsGenAsModules>
      <TsGenCamelCaseNames Condition="'$(TsGenCamelCaseNames)' == 'true'">--camelcase</TsGenCamelCaseNames>
      <TsGenServiceStackRequests Condition="'$(TsGenServiceStackRequests)' == 'true'">--servicestack</TsGenServiceStackRequests>
      <TsGenStringEnums Condition="'$(TsGenStringEnums)' == 'true'">--stringenums</TsGenStringEnums>
      <TsGenTemplateFolder Condition="'$(TsGenTemplateFolder)' != ''">--templateFolder $(TsGenTemplateFolder)</TsGenTemplateFolder>
      <TsGenActionsFilename Condition="'$(TsGenActionsFilename)' != ''">--actionsOutputFileName $(TsGenActionsFilename)</TsGenActionsFilename>
      <TsGenHubsFilename Condition="'$(TsGenHubsFilename)' != ''">--hubsOutputFileName $(TsGenHubsFilename)</TsGenHubsFilename>
      <TsGenApiExplicitOptIn Condition="'$(TsGenApiExplicitOptIn)' == 'true'">--actionsExplicitOptIn</TsGenApiExplicitOptIn>
      <TsGenWrapClasses Condition="'$(TsGenWrapClasses)' != ''">--wrapclasses $(TsGenWrapClasses)</TsGenWrapClasses>
      <TsGenWrapEnums Condition="'$(TsGenWrapEnums)' != ''">--wrapenums $(TsGenWrapEnums)</TsGenWrapEnums>
      <TsGenMomentJsSupport Condition="'$(TsGenMomentJsSupport)' == 'true'">--supportMomentJs</TsGenMomentJsSupport>

      <SuppressServiceCallerParam Condition="'$(TsGenSuppressDefaultServiceCaller)' == 'true'">--suppressdefaultservicecaller</SuppressServiceCallerParam>

      <ExecCmd>dotnet &quot;$(MSBuildThisFileDirectory)TypeScriptDefinitionsGenerator.Core.dll&quot; $(InputAssembliesParam) -o $(TsGenOutputFolder) $(WebApiParam) $(NamespacesParam) $(DebugParam) $(SuppressServiceCallerParam) --actionsstyle $(TsGenApiMethodStyle) $(TsGenAsModules) $(TsGenCamelCaseNames) $(TsGenServiceStackRequests) $(TsGenStringEnums) $(TsGenTemplateFolder) $(TsGenActionsFilename) $(TsGenHubsFilename) $(TsGenApiExplicitOptIn) $(TsGenMomentJsSupport) $(TsGenWrapClasses) $(TsGenWrapEnums) </ExecCmd>
    </PropertyGroup>

    <Message Text="TypeScriptGenerator Exec Command: $(ExecCmd)"></Message>
    <Message Text="TypeScriptGenerator Working Folder: $(ProjectDir)"></Message>
    <Message Condition="'$(TsGenDisabled)' == 'true'" Importance="High" Text="GENERATION DISABLED!"></Message>

    <Exec Condition="'$(TsGenDisabled)' != 'true'" Command="$(ExecCmd)" WorkingDirectory="$(ProjectDir)" />

  </Target>

</Project>